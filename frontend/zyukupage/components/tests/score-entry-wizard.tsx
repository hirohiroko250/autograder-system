'use client';

import React from 'react';
import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
// import { Progress } from '@/components/ui/progress';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { IndividualProblemTable } from './individual-problem-table';
import { ScoreImportModal } from './score-import-modal';
import { DeadlineBanner } from '@/components/ui/deadline-banner';
import {
  ChevronLeft,
  ChevronRight,
  CheckCircle,
  Upload,
  Download,
  GraduationCap,
  BookOpen,
  Users,
  FileCheck,
  AlertTriangle,
  Search
} from 'lucide-react';
import { toast } from 'sonner';
import { useQuery } from '@tanstack/react-query';
import { testApi, commentApi, studentApi } from '@/lib/api-client';

interface ScoreEntryWizardProps {
  year: string;
  period?: string;
}

export function ScoreEntryWizard({ year, period }: ScoreEntryWizardProps) {
  const [currentStep, setCurrentStep] = useState(0);
  const [selectedGrade, setSelectedGrade] = useState('');
  const [selectedSubject, setSelectedSubject] = useState('');
  const [currentPeriod, setCurrentPeriod] = useState('');
  const [selectedStudents, setSelectedStudents] = useState<string[]>([]);
  const [scores, setScores] = useState<Record<string, any>>({});
  const [scoreImportModalOpen, setScoreImportModalOpen] = useState(false);
  const [isDeadlinePassed, setIsDeadlinePassed] = useState(false);
  const [studentSearchQuery, setStudentSearchQuery] = useState('');

  const steps = [
    { id: 'grade', title: 'Â≠¶Âπ¥ÈÅ∏Êäû', icon: GraduationCap },
    { id: 'subject', title: 'ÊïôÁßëÈÅ∏Êäû', icon: BookOpen },
    { id: 'students', title: 'ÁîüÂæíÈÅ∏Êäû', icon: Users },
    { id: 'scores', title: '„Çπ„Ç≥„Ç¢ÂÖ•Âäõ', icon: FileCheck },
    { id: 'confirm', title: 'Á¢∫Ë™ç', icon: CheckCircle },
  ];

  const grades = [
    { value: 'elementary_1', label: 'Â∞èÂ≠¶1Âπ¥Áîü', level: 'elementary' },
    { value: 'elementary_2', label: 'Â∞èÂ≠¶2Âπ¥Áîü', level: 'elementary' },
    { value: 'elementary_3', label: 'Â∞èÂ≠¶3Âπ¥Áîü', level: 'elementary' },
    { value: 'elementary_4', label: 'Â∞èÂ≠¶4Âπ¥Áîü', level: 'elementary' },
    { value: 'elementary_5', label: 'Â∞èÂ≠¶5Âπ¥Áîü', level: 'elementary' },
    { value: 'elementary_6', label: 'Â∞èÂ≠¶6Âπ¥Áîü', level: 'elementary' },
    { value: 'middle_1', label: '‰∏≠Â≠¶1Âπ¥Áîü', level: 'middle_school' },
    { value: 'middle_2', label: '‰∏≠Â≠¶2Âπ¥Áîü', level: 'middle_school' },
    { value: 'middle_3', label: '‰∏≠Â≠¶3Âπ¥Áîü', level: 'middle_school' },
  ];

  const getSubjectsForGrade = (gradeValue: string) => {
    const grade = grades.find(g => g.value === gradeValue);
    if (!grade) return [];
    
    if (grade.level === 'elementary') {
      return [
        { value: 'japanese', label: 'ÂõΩË™û' },
        { value: 'math', label: 'ÁÆóÊï∞' }
      ];
    } else if (grade.level === 'middle_school') {
      return [
        { value: 'english', label: 'Ëã±Ë™û' },
        { value: 'mathematics', label: 'Êï∞Â≠¶' }
      ];
    }
    return [];
  };

  const availableSubjects = selectedGrade ? getSubjectsForGrade(selectedGrade) : [];
  
  // ÁèæÂú®„ÅÆÊôÇÊúü„ÇíËá™ÂãïÂà§ÂÆö
  useEffect(() => {
    const now = new Date();
    const month = now.getMonth() + 1; // 1-12
    
    let period = 'summer'; // „Éá„Éï„Ç©„É´„Éà
    if (month >= 1 && month <= 3) {
      period = 'winter';
    } else if (month >= 4 && month <= 6) {
      period = 'spring';
    } else if (month >= 7 && month <= 12) {
      period = 'summer';
    }
    
    setCurrentPeriod(period);
  }, []);

  // Âà©Áî®ÂèØËÉΩ„Å™„ÉÜ„Çπ„Éà„ÇíÂèñÂæó
  const { data: availableTests, isLoading: testsLoading } = useQuery({
    queryKey: ['available-tests', year, currentPeriod, selectedGrade],
    queryFn: async () => {
      if (!selectedGrade || !currentPeriod) return [];
      
      try {
        console.log('üîç Fetching tests for:', { year, period: currentPeriod, selectedGrade });
        const response = await testApi.getTestDefinitions({ year, period: currentPeriod });
        console.log('üîç Raw API response:', response.results?.length, 'tests found');
        
        const filteredTests = response.results.filter((test: any) => {
          const matches = test.grade_level === selectedGrade;
          console.log(`üîç Test ${test.id}: grade_level=${test.grade_level}, selectedGrade=${selectedGrade}, matches=${matches}`);
          return matches;
        });
        
        console.log('üîç Filtered tests:', filteredTests.length, 'tests match criteria');
        return filteredTests;
      } catch (error) {
        console.error('‚ùå Failed to fetch tests:', error);
        return [];
      }
    },
    enabled: !!selectedGrade && !!currentPeriod,
  });

  // „ÉÜ„Çπ„Éà„Çπ„Ç±„Ç∏„É•„Éº„É´„Åã„ÇâÁ∑†ÂàáÊÉÖÂ†±„ÇíÂèñÂæó
  const { data: testSchedules } = useQuery({
    queryKey: ['test-schedules', year, currentPeriod],
    queryFn: async () => {
      if (!currentPeriod) return [];
      try {
        const response = await testApi.getTestSchedules({ year, period: currentPeriod });
        return response.results;
      } catch (error) {
        console.error('Failed to fetch test schedules:', error);
        return [];
      }
    },
    enabled: !!currentPeriod,
  });

  // Á∑†ÂàáÊó•„ÉÅ„Çß„ÉÉ„ÇØ
  useEffect(() => {
    if (testSchedules && testSchedules.length > 0) {
      const currentSchedule = testSchedules[0];
      const now = new Date();
      const deadline = new Date(currentSchedule.deadline_at);
      setIsDeadlinePassed(now > deadline);
    }
  }, [testSchedules]);

  // ÈÅ∏Êäû„Åï„Çå„Åü„ÉÜ„Çπ„Éà„ÅÆË©≥Á¥∞ÊÉÖÂ†± - ÊúÄÊñ∞„ÅÆ„ÉÜ„Çπ„ÉàÔºàIDÊúÄÂ§ßÔºâ„ÇíÈÅ∏Êäû
  const selectedTest = availableTests?.filter((test: any) => 
    test.subject === selectedSubject
  ).sort((a: any, b: any) => b.id - a.id)[0]; // IDÈôçÈ†Ü„ÅßÊúÄÂàùÔºàÊúÄÊñ∞Ôºâ„ÇíÈÅ∏Êäû

  // Â§ßÂïèÊÉÖÂ†±„ÇíÂèñÂæó
  const { data: questionGroupsData, isLoading: isLoadingQuestions, error: questionGroupsError } = useQuery({
    queryKey: ['question-groups', selectedTest?.id],
    queryFn: async () => {
      if (!selectedTest?.id) return null;
      
      try {
        const response = await testApi.getQuestionGroups(selectedTest.id);
        
        if (response && response.groups && response.groups.length > 0) {
          console.log(`‚úÖ Loaded ${response.groups.length} question groups from backend (Total: ${response.total_max_score}ÁÇπ)`);
          return response;
        } else {
          console.warn('‚ö†Ô∏è No question groups found in API response, using fallback');
        }
      } catch (error) {
        console.error('‚ùå Failed to fetch question groups from API:', error);
      }
      
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Éá„Éï„Ç©„É´„Éà„ÅÆÂ§ßÂïèÊßãÈÄ†„Çí‰ΩúÊàê
      const defaultProblemCount = selectedSubject === 'japanese' || selectedSubject === 'math' ? 5 :
                                 selectedSubject === 'english' || selectedSubject === 'mathematics' ? 6 : 5;
      
      const defaultGroups = Array.from({ length: Math.min(defaultProblemCount, 10) }, (_, i) => ({
        id: null,
        group_number: i + 1,
        max_score: 20,
        title: `Â§ßÂïè${i + 1}`,
        question_count: 0
      }));
      
      return {
        test_id: selectedTest.id,
        total_max_score: defaultGroups.reduce((sum, group) => sum + group.max_score, 0),
        groups: defaultGroups
      };
    },
    enabled: !!selectedTest?.id,
    retry: 2
  });

  // „É¨„Çπ„Éù„É≥„Çπ„Åã„ÇâÂ§ßÂïè„Ç∞„É´„Éº„Éó„ÇíÊäΩÂá∫
  const questionGroups = questionGroupsData?.groups || [];

  // ÂÄãÂà•ÂïèÈ°å„ÇíÂèñÂæó
  const { data: individualProblems, isLoading: isLoadingProblems } = useQuery({
    queryKey: ['individual-problems', selectedTest?.id],
    queryFn: async () => {
      if (!selectedTest?.id) return null;
      try {
        const response = await commentApi.getIndividualProblems(selectedTest.id);
        return response.results;
      } catch (error) {
        console.error('Failed to fetch individual problems:', error);
        // „Éá„Éï„Ç©„É´„ÉàÂïèÈ°å„Çí‰ΩúÊàê„Åó„Å¶ÂÜçÂèñÂæó
        try {
          await commentApi.createDefaultProblems(selectedTest.id, 6, 10);
          const retryResponse = await commentApi.getIndividualProblems(selectedTest.id);
          return retryResponse.results;
        } catch (createError) {
          console.error('Failed to create default problems:', createError);
          return [];
        }
      }
    },
    enabled: !!selectedTest?.id
  });
  
  // ÂÆüÈöõ„ÅÆÁîüÂæí„Éá„Éº„Çø„ÇíÂèñÂæó
  const { data: studentsData } = useQuery({
    queryKey: ['students-for-score-entry', year, currentPeriod, selectedGrade],
    queryFn: async () => {
      if (!currentPeriod) return { results: [], count: 0 };
      
      try {
        const response = await studentApi.getStudentsForScoreEntry({
          year: parseInt(year),
          period: currentPeriod,
          grade: selectedGrade || undefined
        });
        return response;
      } catch (error) {
        console.error('Failed to fetch students:', error);
        return { results: [], count: 0 };
      }
    },
    enabled: !!currentPeriod,
  });

  // ÁîüÂæí„Éá„Éº„ÇøÔºàÂÆüÈöõ„ÅÆAPI„Åã„ÇâÂèñÂæóÔºâ
  const students = studentsData?.results || [];

  // ÁîüÂæíÊ§úÁ¥¢„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
  const filteredStudents = students.filter((student) => {
    if (!studentSearchQuery) return true;
    const query = studentSearchQuery.toLowerCase();
    return (
      student.name.toLowerCase().includes(query) ||
      student.student_id.toLowerCase().includes(query) ||
      (student.classroom && student.classroom.toLowerCase().includes(query))
    );
  });

  // ÁîüÂæí„ÇíÊ†°Ëàé„Åî„Å®„Å´„Ç∞„É´„Éº„ÉóÂåñ
  const groupedStudents = filteredStudents.reduce((groups: Record<string, any[]>, student) => {
    const schoolKey = `${student.school_id}-${student.school_name}`;
    if (!groups[schoolKey]) {
      groups[schoolKey] = [];
    }
    groups[schoolKey].push(student);
    return groups;
  }, {});

  // Á∑†ÂàáÊÉÖÂ†±„ÇíÂèñÂæó
  const currentDeadline = testSchedules && testSchedules.length > 0 
    ? new Date(testSchedules[0].deadline_at)
    : null;

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      // Â≠¶Âπ¥„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÂ†¥Âêà„ÄÅÊïôÁßëÈÅ∏Êäû„Çí„É™„Çª„ÉÉ„Éà
      if (currentStep === 0 && selectedSubject && !availableSubjects.find(s => s.value === selectedSubject)) {
        setSelectedSubject('');
      }
      // ÊïôÁßëÈÅ∏ÊäûÂæå„ÅØÂÖ®ÁîüÂæí„ÇíËá™ÂãïÈÅ∏Êäû
      if (currentStep === 1) {
        setSelectedStudents(students.map(s => s.id));
      }
      setCurrentStep(currentStep + 1);
    }
  };

  const handleBack = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleStudentToggle = (studentId: string) => {
    setSelectedStudents(prev => 
      prev.includes(studentId) 
        ? prev.filter(id => id !== studentId)
        : [...prev, studentId]
    );
  };

  const handleSchoolToggle = (schoolStudents: any[], selectAll: boolean) => {
    const schoolStudentIds = schoolStudents.map(s => s.id);
    if (selectAll) {
      // Ê†°Ëàé„ÅÆÂÖ®ÁîüÂæí„ÇíÈÅ∏Êäû„Å´ËøΩÂä†
      setSelectedStudents(prev => [...new Set([...prev, ...schoolStudentIds])]);
    } else {
      // Ê†°Ëàé„ÅÆÂÖ®ÁîüÂæí„ÇíÈÅ∏Êäû„Åã„ÇâÈô§Â§ñ
      setSelectedStudents(prev => prev.filter(id => !schoolStudentIds.includes(id)));
    }
  };

  const handleSubmit = async () => {
    try {
      if (!selectedTest?.id) {
        toast.error('„ÉÜ„Çπ„ÉàÊÉÖÂ†±„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
        return;
      }

      // „Çπ„Ç≥„Ç¢„Éá„Éº„Çø„ÇíÊï¥ÁêÜ„Åó„Å¶„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆÊßãÈÄ†„Å´Âêà„Çè„Åõ„Çã
      const scoreSubmissions = [];
      
      for (const studentId of selectedStudents) {
        const studentScores = scores[studentId] || {};
        const attendance = studentScores.attendance ?? true;
        
        // Â§ßÂïè„Åî„Å®„ÅÆ„Çπ„Ç≥„Ç¢„ÇíÊ∫ñÂÇô
        for (const problem of questionGroups || []) {
          const scoreValue = studentScores[problem.group_number?.toString() || problem.number?.toString()] || 0;
          
          scoreSubmissions.push({
            student_id: studentId,
            test_id: selectedTest.id,
            question_group_number: problem.group_number || problem.number,
            score: scoreValue,
            attendance: attendance
          });
        }
      }

      // „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâAPI„Å´ÈÄÅ‰ø°
      for (const submission of scoreSubmissions) {
        try {
          await testApi.submitScore(submission);
        } catch (error) {
          console.error('Score submission error:', error);
          // ÂÄãÂà•„ÅÆ„Ç®„É©„Éº„ÅØË®òÈå≤„Åô„Çã„Åå„ÄÅÁ∂öË°å
        }
      }

      toast.success(`${selectedStudents.length}ÂêçÂàÜ„ÅÆ„Çπ„Ç≥„Ç¢„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü`);
      
      // ‰øùÂ≠òÂæå„Å´„Éï„Ç©„Éº„É†„Çí„É™„Çª„ÉÉ„Éà
      setScores({});
      setCurrentStep(0);
      
    } catch (error) {
      console.error('Submit error:', error);
      toast.error('„Çπ„Ç≥„Ç¢„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  };

  const handleExcelImport = () => {
    setScoreImportModalOpen(true);
  };

  const handleExcelImportComplete = (importedData: Record<string, any>) => {
    setScores(prev => ({ ...prev, ...importedData }));
  };

  const handleExcelExport = () => {
    // „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÊ©üËÉΩ
    const csvContent = generateExportData();
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    const gradeName = grades.find(g => g.value === selectedGrade)?.label || selectedGrade;
    const subjectName = availableSubjects.find(s => s.value === selectedSubject)?.label || selectedSubject;
    link.setAttribute('download', `scores_${gradeName}_${subjectName}_${year}_${currentPeriod}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    toast.success('„Çπ„Ç≥„Ç¢„Éá„Éº„Çø„Çí„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Åó„Åæ„Åó„Åü');
  };

  const generateExportData = () => {
    const questionHeaders = Array.from({ length: 10 }, (_, i) => `ÂïèÈ°å${i + 1}`);
    const headers = ['ÁîüÂæíID', 'ÁîüÂæíÂêç', 'ÊïôÂÆ§', ...questionHeaders, 'ÂêàË®à'];
    
    const rows = students.map(student => {
      const studentScores = scores[student.id] || {};
      const total = Object.values(studentScores).reduce((sum: number, score: any) => sum + (parseInt(score) || 0), 0);
      
      const scoreValues = Array.from({ length: 10 }, (_, i) => studentScores[`${i + 1}`] || '');
      
      return [
        student.student_id,
        student.name,
        student.classroom,
        ...scoreValues,
        total
      ];
    });
    
    return [headers, ...rows]
      .map(row => row.join(','))
      .join('\n');
  };


  const handleDownloadBlankTemplate = async (specificSubject?: string) => {
    if (!currentPeriod) {
      toast.error('ÊúüÈñìÊÉÖÂ†±„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì');
      return;
    }

    // ÁâπÂÆö„ÅÆÊïôÁßë„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ„ÄÅÈÅ∏Êäû„Åï„Çå„ÅüÊïôÁßë„Åæ„Åü„ÅØÂà©Áî®ÂèØËÉΩ„Å™ÂÖ®ÊïôÁßë
    const subjectsToDownload = specificSubject 
      ? [specificSubject] 
      : selectedSubject 
        ? [selectedSubject]
        : availableSubjects.map(s => s.value);

    if (subjectsToDownload.length === 0) {
      toast.error('Âà©Áî®ÂèØËÉΩ„Å™ÊïôÁßë„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
      return;
    }

    try {
      // Ë§áÊï∞ÊïôÁßë„ÅÆÂ†¥Âêà„ÅØÈ†ÜÊ¨°„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
      for (const subjectValue of subjectsToDownload) {
        const response = await testApi.generateScoreTemplate({
          year: parseInt(year),
          period: currentPeriod,
          subject: subjectValue
        });

        if (response.success && response.csv_data) {
          // BOM‰ªò„ÅçUTF-8„ÅßCSV„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
          const csv = response.csv_data;
          const blob = new Blob(['\ufeff' + csv], { type: 'text/csv;charset=utf-8;' });
          const link = document.createElement('a');
          link.href = URL.createObjectURL(blob);
          
          const subjectName = [...availableSubjects, 
            { value: 'japanese', label: 'ÂõΩË™û' },
            { value: 'math', label: 'ÁÆóÊï∞' },
            { value: 'english', label: 'Ëã±Ë™û' },
            { value: 'mathematics', label: 'Êï∞Â≠¶' }
          ].find(s => s.value === subjectValue)?.label || subjectValue;
          
          link.download = `ÂÖ®ÂõΩÂ≠¶ÂäõÂêë‰∏ä„ÉÜ„Çπ„Éà_${year}_${currentPeriod}_${subjectName}.csv`;
          link.click();
          
          // Ë§áÊï∞„Éï„Ç°„Ç§„É´„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÊôÇ„ÅÆÈñìÈöî
          if (subjectsToDownload.length > 1) {
            await new Promise(resolve => setTimeout(resolve, 500));
          }
        } else {
          toast.error(`${subjectValue}„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„ÉàÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${response.error || '‰∏çÊòé„Å™„Ç®„É©„Éº'}`);
        }
      }
      
      toast.success(
        subjectsToDownload.length === 1 
          ? '„ÉÜ„É≥„Éó„É¨„Éº„Éà„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Åæ„Åó„Åü'
          : `${subjectsToDownload.length}ÂÄã„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Åæ„Åó„Åü`
      );
    } catch (error) {
      console.error('Template download error:', error);
      toast.error('„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  };

  const handleDownloadAllGradesTemplate = async () => {
    if (!currentPeriod) {
      toast.error('ÊúüÈñìÊÉÖÂ†±„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì');
      return;
    }

    try {
      toast.info('ÁîüÂæí„Éá„Éº„ÇøÔºàÂæóÁÇπÂÖ•„ÇäÔºâ„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶„ÅÑ„Åæ„Åô...');

      // ÂÆü„Éá„Éº„Çø„Ç®„ÇØ„Çπ„Éù„Éº„ÉàAPI„ÇíÂëº„Å≥Âá∫„ÅóÔºàÁîüÂæíÊÉÖÂ†±+Êó¢Â≠ò„ÅÆÁÇπÊï∞Ôºâ
      const response = await testApi.exportScoresWithStudents({
        year: parseInt(year),
        period: currentPeriod
      });

      console.log('Export response:', response);

      // response„Ååundefined„Åß„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™ç
      if (response && response.success === true) {
        toast.success('ÁîüÂæí„Éá„Éº„ÇøÔºàÂæóÁÇπÂÖ•„ÇäÔºâ„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Åæ„Åó„Åü');
      } else if (response && response.success === false) {
        // ÊòéÁ§∫ÁöÑ„Å´false„ÅÆÂ†¥Âêà„ÅÆ„Åø„Ç®„É©„ÉºË°®Á§∫
        console.error('Export failed:', response);
        toast.error(`„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${response.message || response.error || '‰∏çÊòé„Å™„Ç®„É©„Éº'}`);
      }
      // response.success„ÅåÊú™ÂÆöÁæ©„ÅÆÂ†¥Âêà„ÅØ‰Ωï„ÇÇË°®Á§∫„Åó„Å™„ÅÑÔºà„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÅØÊàêÂäü„Åó„Å¶„ÅÑ„ÇãÔºâ
    } catch (error: any) {
      console.error('Export error:', error);
      toast.error(`ÁîüÂæí„Éá„Éº„Çø„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message || ''}`);
    }
  };

  const canProceed = () => {
    switch (currentStep) {
      case 0: return selectedGrade !== '' && currentPeriod !== '';
      case 1: return selectedSubject !== '';
      case 2: return selectedStudents.length > 0;
      case 3: return !isDeadlinePassed; // Á∑†ÂàáÊó•„ÉÅ„Çß„ÉÉ„ÇØ
      case 4: return true;
      default: return false;
    }
  };

  const progress = ((currentStep + 1) / steps.length) * 100;

  return (
    <>
      <div className="space-y-6">
        {currentDeadline && (
          <DeadlineBanner deadline={currentDeadline} />
        )}
        
        {isDeadlinePassed && (
          <Card className="border-red-200 bg-red-50">
            <CardContent className="p-4">
              <div className="flex items-center gap-2 text-red-700">
                <AlertTriangle className="h-5 w-5" />
                <span className="font-medium">ÂÖ•ÂäõÊúüÈôê„ÅåÈÅé„Åé„Å¶„ÅÑ„Åæ„Åô</span>
              </div>
              <p className="text-sm text-red-600 mt-1">
                ÁèæÂú®„ÅØÁÇπÊï∞ÂÖ•Âäõ„Åå„Åß„Åç„Åæ„Åõ„Çì„ÄÇË©≥Á¥∞„ÅØÁÆ°ÁêÜËÄÖ„Å´„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Åè„Å†„Åï„ÅÑ„ÄÇ
              </p>
            </CardContent>
          </Card>
        )}
        
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              {React.createElement(steps[currentStep].icon, { className: "h-5 w-5" })}
              {steps[currentStep].title}
            </CardTitle>
            <CardDescription>
              Step {currentStep + 1} of {steps.length}
            </CardDescription>
            <div className="w-full h-2 bg-gray-200 rounded-full">
              <div 
                className="h-full bg-primary rounded-full transition-all duration-300"
                style={{ width: `${progress}%` }}
              />
            </div>
          </CardHeader>
          <CardContent>
            {currentStep === 0 && (
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold">Â≠¶Âπ¥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</h3>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleDownloadAllGradesTemplate()}
                      className="rounded-xl"
                      disabled={isDeadlinePassed || !currentPeriod}
                      title={
                        !currentPeriod ? "ÊúüÈñìÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠..." : 
                        "ÂÖ®Â≠¶Âπ¥ÂØæÂøúÔºàÂ∞èÂ≠¶Áîü„Éª‰∏≠Â≠¶ÁîüÂÖ®ÊïôÁßëÔºâ„ÅÆÁµ±Âêà„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ"
                      }
                    >
                      <Download className="h-4 w-4 mr-2" />
                      ÁîüÂæí‰∏ÄÊã¨„Ç®„ÇØ„Çπ„Éù„Éº„Éà
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setScoreImportModalOpen(true)}
                      className="rounded-xl"
                      disabled={isDeadlinePassed}
                      title="‰∏ÄÊã¨„Ç®„ÇØ„Çª„É´Ë™≠„ÅøËæº„Åø"
                    >
                      <Upload className="h-4 w-4 mr-2" />
                      ‰∏ÄÊã¨„Ç®„ÇØ„Çª„É´Ë™≠„ÅøËæº„Åø
                    </Button>
                  </div>
                </div>
                
                {currentPeriod && (
                  <div className="p-4 bg-blue-50 rounded-lg">
                    <p className="text-sm text-blue-700">
                      <strong>ÁèæÂú®„ÅÆÂØæË±°ÊúüÈñì:</strong> {year}Âπ¥Â∫¶ {currentPeriod === 'spring' ? 'Êò•Êúü' : currentPeriod === 'summer' ? 'Â§èÊúü' : 'ÂÜ¨Êúü'}
                    </p>
                  </div>
                )}
                
                <div className="space-y-4">
                  <div>
                    <label className="text-sm font-medium mb-2 block">Â≠¶Âπ¥</label>
                    <div className="grid grid-cols-3 gap-3">
                      {grades.map((grade) => (
                        <Button
                          key={grade.value}
                          variant={selectedGrade === grade.value ? "default" : "outline"}
                          className="h-16 flex flex-col gap-2 rounded-xl"
                          onClick={() => setSelectedGrade(grade.value)}
                          disabled={isDeadlinePassed}
                        >
                          <GraduationCap className="h-4 w-4" />
                          <span className="text-xs text-center">{grade.label}</span>
                        </Button>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {currentStep === 1 && (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold">ÊïôÁßë„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</h3>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleDownloadBlankTemplate()}
                      className="rounded-xl"
                      disabled={isDeadlinePassed || !selectedSubject}
                      title={!selectedSubject ? "ÊïôÁßë„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ" : "ÈÅ∏Êäû„Åó„ÅüÊïôÁßë„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ"}
                    >
                      <Download className="h-4 w-4 mr-2" />
                      „ÉÜ„É≥„Éó„É¨„Éº„Éà„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setScoreImportModalOpen(true)}
                      className="rounded-xl"
                      disabled={isDeadlinePassed || !selectedSubject}
                      title={!selectedSubject ? "ÊïôÁßë„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ" : "‰∏ÄÊã¨„Ç®„ÇØ„Çª„É´Ë™≠„ÅøËæº„Åø"}
                    >
                      <Upload className="h-4 w-4 mr-2" />
                      ‰∏ÄÊã¨„Ç®„ÇØ„Çª„É´Ë™≠„ÅøËæº„Åø
                    </Button>
                  </div>
                </div>
                {availableSubjects.length > 0 ? (
                  <div className="grid grid-cols-2 gap-4">
                    {availableSubjects.map((subject) => (
                      <Button
                        key={subject.value}
                        variant={selectedSubject === subject.value ? "default" : "outline"}
                        className="h-20 flex flex-col gap-2 rounded-xl"
                        onClick={() => setSelectedSubject(subject.value)}
                        disabled={isDeadlinePassed}
                      >
                        <BookOpen className="h-5 w-5" />
                        <span>{subject.label}</span>
                      </Button>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8 text-muted-foreground">
                    ÂÖà„Å´Â≠¶Âπ¥„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ
                  </div>
                )}
              </div>
            )}


            {currentStep === 2 && (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold">ÁîüÂæí„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</h3>
                  <div className="flex items-center gap-2">
                    <Badge variant="outline">
                      {selectedStudents.length}ÂêçÈÅ∏Êäû‰∏≠
                    </Badge>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleDownloadBlankTemplate()}
                      className="rounded-xl"
                      disabled={isDeadlinePassed || !selectedSubject}
                      title={!selectedSubject ? "ÊïôÁßë„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ" : "ÈÅ∏Êäû„Åó„ÅüÊïôÁßë„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ"}
                    >
                      <Download className="h-4 w-4 mr-2" />
                      „ÉÜ„É≥„Éó„É¨„Éº„Éà„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setScoreImportModalOpen(true)}
                      className="rounded-xl"
                      disabled={isDeadlinePassed || !selectedSubject}
                      title={!selectedSubject ? "ÊïôÁßë„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ" : "‰∏ÄÊã¨„Ç®„ÇØ„Çª„É´Ë™≠„ÅøËæº„Åø"}
                    >
                      <Upload className="h-4 w-4 mr-2" />
                      ‰∏ÄÊã¨„Ç®„ÇØ„Çª„É´Ë™≠„ÅøËæº„Åø
                    </Button>
                  </div>
                </div>

                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                  <Input
                    type="text"
                    placeholder="ÁîüÂæíÂêç„ÄÅID„ÄÅÊïôÂÆ§„ÅßÊ§úÁ¥¢..."
                    value={studentSearchQuery}
                    onChange={(e) => setStudentSearchQuery(e.target.value)}
                    className="pl-10 rounded-xl"
                  />
                </div>

                <div className="space-y-4">
                  {Object.entries(groupedStudents).length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      <p>Ë©≤ÂΩì„Åô„ÇãÁîüÂæí„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì</p>
                      <p className="text-sm mt-1">Â≠¶Âπ¥„ÇÑÊúüÈñì„ÅÆË®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
                    </div>
                  ) : (
                    Object.entries(groupedStudents).map(([schoolKey, schoolStudents]) => {
                      const school = schoolStudents[0];
                      return (
                        <div key={schoolKey} className="border rounded-lg p-4">
                          <div className="flex items-center justify-between mb-3">
                            <h4 className="font-semibold text-lg">
                              {school.school_name}
                            </h4>
                            <div className="flex items-center gap-2">
                              <Badge variant="outline">
                                {schoolStudents.length}Âêç
                              </Badge>
                              <div className="flex gap-1">
                                <Button
                                  variant="outline"
                                  size="sm"
                                  className="text-xs px-2 py-1 h-6"
                                  onClick={() => handleSchoolToggle(schoolStudents, true)}
                                >
                                  ÂÖ®ÈÅ∏Êäû
                                </Button>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  className="text-xs px-2 py-1 h-6"
                                  onClick={() => handleSchoolToggle(schoolStudents, false)}
                                >
                                  ÂÖ®Ëß£Èô§
                                </Button>
                              </div>
                            </div>
                          </div>
                          <div className="space-y-2">
                            {schoolStudents.map((student) => (
                              <div
                                key={student.id}
                                className={`flex items-center justify-between p-3 border rounded-lg cursor-pointer transition-colors ${
                                  selectedStudents.includes(student.id) 
                                    ? 'border-primary bg-primary/5' 
                                    : 'hover:bg-gray-50'
                                }`}
                                onClick={() => handleStudentToggle(student.id)}
                              >
                                <div className="flex items-center gap-3">
                                  <div className={`w-4 h-4 rounded border-2 ${
                                    selectedStudents.includes(student.id) 
                                      ? 'bg-primary border-primary' 
                                      : 'border-gray-300'
                                  }`}>
                                    {selectedStudents.includes(student.id) && (
                                      <CheckCircle className="w-full h-full text-white" />
                                    )}
                                  </div>
                                  <div>
                                    <p className="font-medium">{student.name}</p>
                                    <p className="text-sm text-muted-foreground">
                                      ÁîüÂæíID: {student.student_id} ‚Ä¢ {student.classroom} {student.classroom_id ? `(${student.classroom_id})` : ''}
                                    </p>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      );
                    })
                  )}
                </div>
              </div>
            )}

            {currentStep === 3 && (
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold">„Çπ„Ç≥„Ç¢„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ</h3>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleDownloadBlankTemplate()}
                      className="rounded-xl"
                      disabled={isDeadlinePassed || !selectedSubject}
                      title={!selectedSubject ? "ÊïôÁßë„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ" : "ÈÅ∏Êäû„Åó„ÅüÊïôÁßë„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ"}
                    >
                      <Download className="h-4 w-4 mr-2" />
                      „ÉÜ„É≥„Éó„É¨„Éº„Éà„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setScoreImportModalOpen(true)}
                      className="rounded-xl"
                      disabled={isDeadlinePassed || !selectedSubject}
                      title={!selectedSubject ? "ÊïôÁßë„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ" : "‰∏ÄÊã¨„Ç®„ÇØ„Çª„É´Ë™≠„ÅøËæº„Åø"}
                    >
                      <Upload className="h-4 w-4 mr-2" />
                      ‰∏ÄÊã¨„Ç®„ÇØ„Çª„É´Ë™≠„ÅøËæº„Åø
                    </Button>
                  </div>
                </div>
                <div className="text-sm text-muted-foreground mb-4">
                  {grades.find(g => g.value === selectedGrade)?.label || selectedGrade} {availableSubjects.find(s => s.value === selectedSubject)?.label || selectedSubject} - {selectedStudents.length}Âêç
                </div>
                {!isDeadlinePassed ? (
                  <>
                    
                    <IndividualProblemTable
                    students={students.filter(s => selectedStudents.includes(s.id)).map(s => ({
                      ...s,
                      attendance: scores[s.id]?.attendance ?? true
                    }))}
                    problems={questionGroups?.map((group: any) => ({
                      number: group.group_number,
                      maxScore: group.max_score,
                      title: group.title || `Â§ßÂïè${group.group_number}`
                    })) || Array.from({ length: Math.min(5, 10) }, (_, i) => ({
                      number: i + 1,
                      maxScore: 20,
                      title: `Â§ßÂïè${i + 1}`
                    }))}
                    scores={scores}
                    onScoreChange={setScores}
                    onAttendanceChange={(studentId, attendance) => {
                      setScores(prev => ({
                        ...prev,
                        [studentId]: {
                          ...prev[studentId],
                          attendance
                        }
                      }));
                    }}
                  />
                  </>
                ) : (
                  <div className="text-center py-8 text-red-600">
                    <AlertTriangle className="h-12 w-12 mx-auto mb-4" />
                    <p className="text-lg font-medium">ÂÖ•ÂäõÊúüÈôê„ÅåÈÅé„Åé„Å¶„ÅÑ„Åæ„Åô</p>
                    <p className="text-sm">ÁèæÂú®„ÅØÁÇπÊï∞ÂÖ•Âäõ„Åå„Åß„Åç„Åæ„Åõ„Çì„ÄÇ</p>
                  </div>
                )}
              </div>
            )}

            {currentStep === 4 && (
              <div className="space-y-4">
                <h3 className="text-lg font-semibold">ÂÖ•ÂäõÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ</h3>
                <div className="space-y-4">
                  <div className="grid grid-cols-4 gap-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Â≠¶Âπ¥</label>
                      <Badge variant="outline">{grades.find(g => g.value === selectedGrade)?.label || selectedGrade}</Badge>
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">ÊôÇÊúü</label>
                      <Badge variant="outline">{currentPeriod === 'spring' ? 'Êò•Êúü' : currentPeriod === 'summer' ? 'Â§èÊúü' : 'ÂÜ¨Êúü'}</Badge>
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">ÊïôÁßë</label>
                      <Badge variant="outline">{availableSubjects.find(s => s.value === selectedSubject)?.label || selectedSubject}</Badge>
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Â§ßÂïèÊï∞</label>
                      <Badge variant="outline">{questionGroups?.length || 'Êú™Ë®≠ÂÆö'}Âïè</Badge>
                    </div>
                    {questionGroups && questionGroups.length > 0 && (
                      <div className="space-y-2">
                        <label className="text-sm font-medium">Â§ßÂïèÂà•Ê∫ÄÁÇπ</label>
                        <div className="flex flex-wrap gap-1">
                          {questionGroups.map((group: any) => (
                            <Badge key={group.group_number} variant="secondary" className="text-xs">
                              Â§ßÂïè{group.group_number}: {group.max_score}ÁÇπ
                            </Badge>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium">ÂØæË±°ÁîüÂæí</label>
                    <div className="flex flex-wrap gap-2">
                      {students
                        .filter(s => selectedStudents.includes(s.id))
                        .map(student => (
                          <Badge key={student.id} variant="outline">
                            {student.name} (ID: {student.student_id})
                          </Badge>
                        ))}
                    </div>
                  </div>
                  <div className="space-y-2">
                    <label className="text-sm font-medium">ÂÖ•ÂäõÁä∂Ê≥Å</label>
                    <div className="bg-gray-50 p-4 rounded-lg">
                      <p className="text-sm">
                        {Object.keys(scores).length > 0 
                          ? `${Object.keys(scores).length}‰ª∂„ÅÆ„Çπ„Ç≥„Ç¢„ÅåÂÖ•Âäõ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô`
                          : '„Çπ„Ç≥„Ç¢„ÅåÂÖ•Âäõ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì'
                        }
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            <div className="flex justify-between pt-6">
              <Button
                variant="outline"
                onClick={handleBack}
                disabled={currentStep === 0}
                className="rounded-xl"
              >
                <ChevronLeft className="h-4 w-4 mr-2" />
                Êàª„Çã
              </Button>
              {currentStep < steps.length - 1 ? (
                <Button
                  onClick={handleNext}
                  disabled={!canProceed()}
                  className="rounded-xl bg-primary hover:bg-primary/90"
                >
                  Ê¨°„Å∏
                  <ChevronRight className="h-4 w-4 ml-2" />
                </Button>
              ) : (
                <Button
                  onClick={handleSubmit}
                  disabled={isDeadlinePassed}
                  className="rounded-xl bg-primary hover:bg-primary/90"
                >
                  <CheckCircle className="h-4 w-4 mr-2" />
                  ‰øùÂ≠ò
                </Button>
              )}
            </div>
          </CardContent>
        </Card>


        <ScoreImportModal
          open={scoreImportModalOpen}
          onOpenChange={setScoreImportModalOpen}
          testId={selectedTest?.id}
        />
      </div>
    </>
  );
}