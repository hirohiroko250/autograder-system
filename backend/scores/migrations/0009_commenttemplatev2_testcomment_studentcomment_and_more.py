# Generated by Django 4.2.7 on 2025-07-22 04:17

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("tests", "0010_alter_testdefinition_grade_level"),
        ("students", "0006_remove_phone_number"),
        ("schools", "0004_school_membership_type"),
        ("scores", "0008_testattendance_questionscore"),
    ]

    operations = [
        migrations.CreateModel(
            name="CommentTemplateV2",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=200, verbose_name="テンプレート名"),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("positive", "良い評価"),
                            ("needs_improvement", "改善が必要"),
                            ("neutral", "中立的"),
                            ("encouragement", "励まし"),
                            ("specific_skill", "特定スキル"),
                            ("homework", "宿題関連"),
                            ("behavior", "学習態度"),
                        ],
                        max_length=20,
                        verbose_name="カテゴリ",
                    ),
                ),
                ("template_text", models.TextField(verbose_name="テンプレート文")),
                (
                    "applicable_scope",
                    models.CharField(
                        choices=[
                            ("any", "全般"),
                            ("high_score", "高得点時"),
                            ("low_score", "低得点時"),
                            ("average_score", "平均的得点時"),
                            ("improved", "前回より向上"),
                            ("declined", "前回より低下"),
                            ("specific_subject", "特定科目"),
                        ],
                        default="any",
                        max_length=20,
                        verbose_name="適用条件",
                    ),
                ),
                (
                    "subject_filter",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="科目フィルター"
                    ),
                ),
                (
                    "score_range_min",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="適用得点範囲(最小)"
                    ),
                ),
                (
                    "score_range_max",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="適用得点範囲(最大)"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="有効")),
                (
                    "usage_count",
                    models.IntegerField(default=0, verbose_name="使用回数"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "コメントテンプレートV2",
                "verbose_name_plural": "コメントテンプレートV2",
                "db_table": "comment_templates_v2",
                "indexes": [
                    models.Index(
                        fields=["category"], name="comment_tem_categor_c13e28_idx"
                    ),
                    models.Index(
                        fields=["applicable_scope"],
                        name="comment_tem_applica_5bde75_idx",
                    ),
                    models.Index(
                        fields=["is_active"], name="comment_tem_is_acti_b2aee4_idx"
                    ),
                    models.Index(
                        fields=["usage_count"], name="comment_tem_usage_c_0729cb_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TestComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "scope",
                    models.CharField(
                        choices=[
                            ("test_overall", "テスト全体"),
                            ("question_group", "大問別"),
                            ("question", "問題別"),
                            ("subject_area", "分野別"),
                        ],
                        default="test_overall",
                        max_length=20,
                        verbose_name="コメント範囲",
                    ),
                ),
                ("content", models.TextField(verbose_name="コメント内容")),
                (
                    "is_positive",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="ポジティブ評価"
                    ),
                ),
                (
                    "is_auto_generated",
                    models.BooleanField(default=False, verbose_name="自動生成"),
                ),
                (
                    "auto_generation_rule",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="自動生成ルール"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "question",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="tests.question",
                    ),
                ),
                (
                    "question_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="tests.questiongroup",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_comments",
                        to="students.student",
                    ),
                ),
                (
                    "test",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_comments",
                        to="tests.testdefinition",
                    ),
                ),
            ],
            options={
                "verbose_name": "テストコメント",
                "verbose_name_plural": "テストコメント",
                "db_table": "test_comments",
                "indexes": [
                    models.Index(
                        fields=["student", "test"],
                        name="test_commen_student_97fce8_idx",
                    ),
                    models.Index(
                        fields=["question_group"], name="test_commen_questio_f13c75_idx"
                    ),
                    models.Index(
                        fields=["question"], name="test_commen_questio_5bbaf9_idx"
                    ),
                    models.Index(fields=["scope"], name="test_commen_scope_bc6e34_idx"),
                    models.Index(
                        fields=["is_positive"], name="test_commen_is_posi_9b646d_idx"
                    ),
                    models.Index(
                        fields=["is_auto_generated"],
                        name="test_commen_is_auto_e0581d_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="StudentComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "comment_type",
                    models.CharField(
                        choices=[
                            ("general", "総合コメント"),
                            ("improvement", "改善点"),
                            ("strength", "強み"),
                            ("homework", "宿題・課題"),
                            ("parent_note", "保護者連絡"),
                            ("behavioral", "学習態度"),
                            ("academic", "学習内容"),
                        ],
                        default="general",
                        max_length=20,
                        verbose_name="コメント種別",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="タイトル")),
                ("content", models.TextField(verbose_name="コメント内容")),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("teacher_only", "教師のみ"),
                            ("parent_visible", "保護者表示可"),
                            ("student_visible", "生徒表示可"),
                            ("public", "全体公開"),
                        ],
                        default="teacher_only",
                        max_length=20,
                        verbose_name="表示権限",
                    ),
                ),
                (
                    "is_important",
                    models.BooleanField(default=False, verbose_name="重要フラグ"),
                ),
                (
                    "follow_up_required",
                    models.BooleanField(default=False, verbose_name="フォローアップ要"),
                ),
                (
                    "follow_up_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="フォローアップ予定日"
                    ),
                ),
                (
                    "tags",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="タグ（カンマ区切り）"
                    ),
                ),
                ("created_by", models.CharField(max_length=100, verbose_name="作成者")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="students.student",
                    ),
                ),
                (
                    "test",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_comments",
                        to="tests.testdefinition",
                    ),
                ),
            ],
            options={
                "verbose_name": "生徒コメント",
                "verbose_name_plural": "生徒コメント",
                "db_table": "student_comments",
                "indexes": [
                    models.Index(
                        fields=["student", "test"],
                        name="student_com_student_197ac5_idx",
                    ),
                    models.Index(
                        fields=["comment_type"], name="student_com_comment_5cee09_idx"
                    ),
                    models.Index(
                        fields=["visibility"], name="student_com_visibil_5adcac_idx"
                    ),
                    models.Index(
                        fields=["is_important"], name="student_com_is_impo_12c843_idx"
                    ),
                    models.Index(
                        fields=["follow_up_required", "follow_up_date"],
                        name="student_com_follow__213a17_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="student_com_created_ff0fc5_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PastDataImport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "import_type",
                    models.CharField(
                        choices=[
                            ("student_data", "生徒データ"),
                            ("score_data", "スコアデータ"),
                            ("comment_data", "コメントデータ"),
                            ("attendance_data", "出席データ"),
                            ("test_results", "テスト結果"),
                            ("full_migration", "全データ移行"),
                        ],
                        max_length=20,
                        verbose_name="インポート種別",
                    ),
                ),
                (
                    "source_system",
                    models.CharField(max_length=100, verbose_name="移行元システム"),
                ),
                (
                    "file_path",
                    models.CharField(
                        blank=True, max_length=500, verbose_name="ファイルパス"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "待機中"),
                            ("processing", "処理中"),
                            ("completed", "完了"),
                            ("failed", "失敗"),
                            ("partial", "部分完了"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="処理状況",
                    ),
                ),
                (
                    "total_records",
                    models.IntegerField(default=0, verbose_name="総レコード数"),
                ),
                (
                    "processed_records",
                    models.IntegerField(default=0, verbose_name="処理済みレコード数"),
                ),
                (
                    "success_records",
                    models.IntegerField(default=0, verbose_name="成功レコード数"),
                ),
                (
                    "error_records",
                    models.IntegerField(default=0, verbose_name="エラーレコード数"),
                ),
                ("error_log", models.TextField(blank=True, verbose_name="エラーログ")),
                (
                    "processing_log",
                    models.TextField(blank=True, verbose_name="処理ログ"),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="開始時刻"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="完了時刻"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "target_school",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="schools.school",
                    ),
                ),
            ],
            options={
                "verbose_name": "過去データインポート",
                "verbose_name_plural": "過去データインポート",
                "db_table": "past_data_imports",
                "indexes": [
                    models.Index(
                        fields=["import_type"], name="past_data_i_import__718911_idx"
                    ),
                    models.Index(
                        fields=["status"], name="past_data_i_status_94e94b_idx"
                    ),
                    models.Index(
                        fields=["target_school"], name="past_data_i_target__8fc016_idx"
                    ),
                    models.Index(
                        fields=["started_at"], name="past_data_i_started_ffff7c_idx"
                    ),
                ],
            },
        ),
    ]
